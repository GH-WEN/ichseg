load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/ich_logistic_model.Rda")
ls()
modlist
logistic_modlist = modlist
save(logistic_modlist, file = "~/Dropbox/Packages/cttools/data/logistic_modlist.rda")
load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/Reseg_Aggregate_models_Rigid_rf.Rda")
rf_modlist = modlist
rf_modlist
rf_modlist$mod
library(randomForest)
rf_modlist$mod
save(rf_modlist, file = "~/Dropbox/Packages/cttools/data/rf_modlist.rda")
q('on')
q('no')
load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/rf_modlist.rda")
length(rf_modlist)
names(rf_modlist)
rf_modlist$mod.pauc
rf_modlist$mod.pauc.cut
load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/Reseg_Aggregate_models_Rigid_logistic_smoothed.Rda")
modlist
logistic_cutoffs = modlist
save(logistic_cutoffs, file = "~/Dropbox/Packages/cttools/data/logistic_cutoffs.rda")
load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/Reseg_Aggregate_models_Rigid_rf_smoothed.Rda")
smoothed_rf_cutoffs = modlist
save(smoothed_rf_cutoffs, file = "~/Dropbox/Packages/cttools/data/smoothed_rf_cutoffs.rda")
load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/Reseg_Aggregate_models_Rigid_logistic_smoothed.Rda")
logistic_cutoffs = modlist
smoothed_logistic_cutoffs = modlist
save(logistic_cutoffs, file = "~/Dropbox/Packages/cttools/data/smoothed_logistic_cutoffs.rda")
load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/smoothed_logistic_cutoffs.rda")
save(smoothed_logistic_cutoffs, file = "~/Dropbox/Packages/cttools/data/smoothed_logistic_cutoffs.rda")
q('no')
load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/rf_modlist.rda")
ls()
?save()
save(rf_modlist, file = "/Users/johnmuschelli/Dropbox/Packages/cttools/data/rf_modlist.rda", compression_level=9)
load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/rf_modlist.rda")
names(rf_modlist$mod)
names(rf_modlist$mod$localImportance)
rf_modlist$mod$localImportance
sapply(rf_modlist, object.size)
sapply(rf_modlist$mod, object.size)
sort(sapply(rf_modlist$mod, object.size))
?randomForest
library(randomForest)
?randomForest
set.seed(71)#
iris.rf <- randomForest(Species ~ ., data=iris, importance=TRUE,#
                        proximity=TRUE)#
print(iris.rf)#
## Look at variable importance:#
round(importance(iris.rf), 2)
rf
iris.rf
trim_rf = function(object){#
    keep_names = c("forest",  "type",  "na.action",  "forest$cutoff",  "classes",  "terms",  "importance",  "coefs") #
    object[keep_names]#
}
ii = trim_rf(iris.rf)
ii
predict(ii, newdata = iris)
class(ii)
object = iris.rf
keep_names = c("forest",  "type",  "na.action",  "forest$cutoff",  "classes",  "terms",  "importance",  "coefs") #
    object[keep_names]
keep_names = c("forest",  "type",  "na.action",  "forest$cutoff",  "classes",  "terms",  "importance",  "coefs") #
    object[[keep_names]]
names(keep_names)
trim_rf = function(object){#
    keep_names = c("forest",  "type",  "na.action",  "forest$cutoff",  "classes",  "terms",  "importance",  "coefs") #
#
    nn = names(object)#
    sd = setdiff(nn, keep_names)#
    for (icn in seq_along(sd)){#
        object[[sd[icn]]] = NULL#
    }#
}
ii = trim_rf(iris.rf)
ii
trim_rf = function(object){#
    keep_names = c("forest",  "type",  "na.action",  "forest$cutoff",  "classes",  "terms",  "importance",  "coefs") #
#
    nn = names(object)#
    sd = setdiff(nn, keep_names)#
    for (icn in seq_along(sd)){#
        object[[sd[icn]]] = NULL#
    }#
    object#
}
ii = trim_rf(iris.rf)
ii
predict(ii, newdata = iris)
predict(ii, newdata = iris, type = "prob")
object.size(iris.rf)
load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/rf_modlist.rda")
save(rf_modlist, file = "/Users/johnmuschelli/Dropbox/Packages/cttools/data/rf_modlist.rda", compression_level = 9, compress = TRUE)
trim_rf = function(object){#
    keep_names = c("forest",  "type",  "na.action",  "forest$cutoff",  "classes",  "terms",  "importance",  "coefs") #
#
    nn = names(object)#
    sd = setdiff(nn, keep_names)#
    for (icn in seq_along(sd)){#
        object[[sd[icn]]] = NULL#
    }#
    object#
}
rf = rf_modlist$mod
rf
library(randomForest)
rf
sapply(rf, object.size)
load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/rf_modlist.rda")
save(rf_modlist, file = "/Users/johnmuschelli/Dropbox/Packages/cttools/data/rf_modlist.rda", compress = TRUE, compression_level=9)
load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/rf_modlist.rda")
?save
save(rf_modlist, compress = "xz", file = "/Users/johnmuschelli/Dropbox/Packages/cttools/data/rf_modlist.rda")
q('no')
load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/rf_modlist.rda")
qstat
rf_modlist$mod
library(randomForest)
rf = rf_modlist$mod
trim_rf = function(object, printable = TRUE){#
    keep_names = c("forest",  "type",  "na.action",  "forest$cutoff",  "classes",  "terms",  "importance",  "coefs")#
#
    if (printable){#
        keep_names = c(keep_names, #
        "err.rate", "confusion")#
    }#
    keep_names = unique(keep_names)#
#
    nn = names(object)#
    sd = setdiff(nn, keep_names)#
    for (icn in seq_along(sd)){#
        object[[sd[icn]]] = NULL#
    }#
    object#
}
trf = trim_rf(rf)
trf
q('')
q('no')
load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/rf_modlist.rda")
rf = rf_modlist$mod
trim_rf = function(object, printable = TRUE){#
    keep_names = c("forest",  "type",  #
        "na.action",  "forest$cutoff",  #
        "classes",  "terms",  "importance",  #
        "coefs")#
#
    if (printable){#
        keep_names = c(keep_names, #
        "err.rate", "confusion")#
    }#
    keep_names = unique(keep_names)#
#
    nn = names(object)#
    sd = setdiff(nn, keep_names)#
    for (icn in seq_along(sd)){#
        object[[sd[icn]]] = NULL#
    }#
    object#
}
trf = trim_rf(rf)
trf
library(randomForest)
trf
trf = trim_rf(rf, rf)
names(rf)
q('no')
load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/rf_modlist.rda")
library(randomForest)
rf = rf_modlist$mod
trim_rf = function(object, printable = TRUE){#
    keep_names = c("forest",  "type",  #
        "na.action",  "forest$cutoff",  #
        "classes",  "terms",  "importance",  #
        "coefs")#
#
    if (printable){#
        keep_names = c(keep_names, #
        "err.rate", "confusion", #
        "ntree", "mtry")#
    }#
    keep_names = unique(keep_names)#
#
    nn = names(object)#
    sd = setdiff(nn, keep_names)#
    for (icn in seq_along(sd)){#
        object[[sd[icn]]] = NULL#
    }#
    object#
}
trf = trim_rf(rf)
trf
rf$call
rf
trf
trim_rf = function(object, printable = TRUE){#
    keep_names = c("forest",  "type",  #
        "na.action",  "forest$cutoff",  #
        "classes",  "terms",  "importance",  #
        "coefs")#
#
    if (printable){#
        keep_names = c(keep_names, #
        "err.rate", "confusion", #
        "ntree", "mtry", "call")#
    }#
    keep_names = unique(keep_names)#
#
    nn = names(object)#
    sd = setdiff(nn, keep_names)#
    for (icn in seq_along(sd)){#
        object[[sd[icn]]] = NULL#
    }#
    object#
}
trf = trim_rf(rf)
trf
object.size(rf)
print(object.size(rf), units = "Mb")
print(object.size(trf), units = "Mb")
trf
sort(sapply(trf, object.size))
load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/rf_modlist.rda")
rf_modlist$mod$mtry
rf_modlist$mod
load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/logistic_modlist.rda")
modlist$mod
logistic_modlist$mod
load("/Users/johnmuschelli/Dropbox/Packages/cttools/data/rf_modlist.rda")
library(randomForest)
varImpPlot(rf_modlist$mod)
q('no')
load("/Users/johnmuschelli/Dropbox/Packages/ichseg/data/logistic_modlist.rda")
logistic_modlist
logistic_modlist$mod
coef(logistic_modlist$mod)
library(tidyr)
library(broom)
install.packages("broom")
library(broom)
broom(coef(logistic_modlist$mod))
?broom
help(package ="broom")
tidy(logistic_modlist$mod)
glance(logistic_modlist$mod)
??lm_tidiers
tidy
getMethods("tidy")
findMethods("tidy")
?MethodsList
getMethod("tidy", "lm")
?getMethod("tidy", "lm")
selectMethod("tidy", "lm")
selectMethod("tidy")
broom:::tidy.lm
tidy(logistic_modlist$mod, quick = TRUE)
load("/Users/johnmuschelli/Dropbox/Packages/ichseg/data/logistic_modlist.rda")
load("logistic_modlist.rda")#
coefs = broom::tidy(logistic_modlist$mod, quick = TRUE)#
plyr::rename(coefs$term, c("(Intercept)" = "Intercept", #
"moment1" = "Neighborhood mean", #
"moment2" = "Neighborhood sd", #
"skew" = "Neighborhood skew", #
"kurtosis" = "Neighborhood kurtosis", #
"value" = "Image intensity (HU)",#
"thresh" = "Threshold (>= 40 and <= 80)", #
"zscore1" = "Z-score plane 1", #
"zscore2" = "Z-score plane 2", #
"zscore3" = "Z-score plane 3", #
"win_z" = "Winsorized z-score (20\% trim)", #
"pct_thresh" = "Percentage thresholded neighbors", #
"prob_img" = "Atropos probability image", #
"pct_zero_neighbor" = "Percent of zero neighbors", #
"any_zero_neighbor" = "Indicator of any zero neighbors", #
"dist_centroid" = "Distance to Image centroid", #
"smooth5" = "Gaussian smooth (5mm$^3$)", #
"smooth10" = "Gaussian smooth (10mm$^3$)", #
"smooth20" = "Gaussian smooth (20mm$^3$)", #
"zscore_template" = "Z-score-to-template image", #
"flipped_value" = "Contralateral difference"#
)#
xtab = xtable(coefs)
library(xtable)
load("logistic_modlist.rda")#
coefs = broom::tidy(logistic_modlist$mod, quick = TRUE)#
coefs$term = plyr::rename(coefs$term, c("(Intercept)" = "Intercept", #
"moment1" = "Neighborhood mean", #
"moment2" = "Neighborhood sd", #
"skew" = "Neighborhood skew", #
"kurtosis" = "Neighborhood kurtosis", #
"value" = "Image intensity (HU)",#
"thresh" = "Threshold (>= 40 and <= 80)", #
"zscore1" = "Z-score plane 1", #
"zscore2" = "Z-score plane 2", #
"zscore3" = "Z-score plane 3", #
"win_z" = "Winsorized z-score (20\\% trim)", #
"pct_thresh" = "Percentage thresholded neighbors", #
"prob_img" = "Atropos probability image", #
"pct_zero_neighbor" = "Percent of zero neighbors", #
"any_zero_neighbor" = "Indicator of any zero neighbors", #
"dist_centroid" = "Distance to Image centroid", #
"smooth5" = "Gaussian smooth (5mm$^3$)", #
"smooth10" = "Gaussian smooth (10mm$^3$)", #
"smooth20" = "Gaussian smooth (20mm$^3$)", #
"zscore_template" = "Z-score-to-template image", #
"flipped_value" = "Contralateral difference"#
)#
xtab = xtable(coefs)
load("logistic_modlist.rda")#
coefs = broom::tidy(logistic_modlist$mod, quick = TRUE)#
coefs$term = plyr::rename(coefs$term, c("(Intercept)" = "Intercept", #
"moment1" = "Neighborhood mean", #
"moment2" = "Neighborhood sd", #
"skew" = "Neighborhood skew", #
"kurtosis" = "Neighborhood kurtosis", #
"value" = "Image intensity (HU)",#
"thresh" = "Threshold (>= 40 and <= 80)", #
"zscore1" = "Z-score plane 1", #
"zscore2" = "Z-score plane 2", #
"zscore3" = "Z-score plane 3", #
"win_z" = "Winsorized z-score (20\\% trim)", #
"pct_thresh" = "Percentage thresholded neighbors", #
"prob_img" = "Atropos probability image", #
"pct_zero_neighbor" = "Percent of zero neighbors", #
"any_zero_neighbor" = "Indicator of any zero neighbors", #
"dist_centroid" = "Distance to Image centroid", #
"smooth5" = "Gaussian smooth (5mm$^3$)", #
"smooth10" = "Gaussian smooth (10mm$^3$)", #
"smooth20" = "Gaussian smooth (20mm$^3$)", #
"zscore_template" = "Z-score-to-template image", #
"flipped_value" = "Contralateral difference"#
)#
)
coefs
coefs$term
plyr::rename(coefs$term, c("(Intercept)" = "Intercept"))
coefs = broom::tidy(logistic_modlist$mod, quick = TRUE)#
rvec = c("(Intercept)" = "Intercept", #
"moment1" = "Neighborhood mean", #
"moment2" = "Neighborhood sd", #
"skew" = "Neighborhood skew", #
"kurtosis" = "Neighborhood kurtosis", #
"value" = "Image intensity (HU)",#
"thresh" = "Threshold (>= 40 and <= 80)", #
"zscore1" = "Z-score plane 1", #
"zscore2" = "Z-score plane 2", #
"zscore3" = "Z-score plane 3", #
"win_z" = "Winsorized z-score (20\\% trim)", #
"pct_thresh" = "Percentage thresholded neighbors", #
"prob_img" = "Atropos probability image", #
"pct_zero_neighbor" = "Percent of zero neighbors", #
"any_zero_neighbor" = "Indicator of any zero neighbors", #
"dist_centroid" = "Distance to Image centroid", #
"smooth5" = "Gaussian smooth (5mm$^3$)", #
"smooth10" = "Gaussian smooth (10mm$^3$)", #
"smooth20" = "Gaussian smooth (20mm$^3$)", #
"zscore_template" = "Z-score-to-template image", #
"flipped_value" = "Contralateral difference"#
)#
revec = names(rvec)#
names(revec) = rvec#
#
coefs$term = plyr::rename(coefs$term, revec)
ceofs
coefs
coefs$term
coefs = broom::tidy(logistic_modlist$mod, quick = TRUE)#
coefs$term = plyr::revalue(coefs$term, c("(Intercept)" = "Intercept", #
"moment1" = "Neighborhood mean", #
"moment2" = "Neighborhood sd", #
"skew" = "Neighborhood skew", #
"kurtosis" = "Neighborhood kurtosis", #
"value" = "Image intensity (HU)",#
"thresh" = "Threshold (>= 40 and <= 80)", #
"zscore1" = "Z-score plane 1", #
"zscore2" = "Z-score plane 2", #
"zscore3" = "Z-score plane 3", #
"win_z" = "Winsorized z-score (20\\% trim)", #
"pct_thresh" = "Percentage thresholded neighbors", #
"prob_img" = "Atropos probability image", #
"pct_zero_neighbor" = "Percent of zero neighbors", #
"any_zero_neighbor" = "Indicator of any zero neighbors", #
"dist_centroid" = "Distance to Image centroid", #
"smooth5" = "Gaussian smooth (5mm$^3$)", #
"smooth10" = "Gaussian smooth (10mm$^3$)", #
"smooth20" = "Gaussian smooth (20mm$^3$)", #
"zscore_template" = "Z-score-to-template image", #
"flipped_value" = "Contralateral difference"#
)#
)
coefs
xtab = xtable(coefs)
xtab
print.xtable(xtab, type = "latex", include.rownames=FALSE)
?xtable
load("/Users/johnmuschelli/Dropbox/Packages/ichseg/data/logistic_modlist.rda")
library(plyr)
library(broom)
load("logistic_modlist.rda")#
npred = length(coef(logistic_modlist$mod)) - 1#
# npred for intercept#
stopifnot(npred == 20)#
coefs = broom::tidy(logistic_modlist$mod, quick = TRUE)#
coefs$term = plyr::revalue(coefs$term, c("(Intercept)" = "Intercept", #
"moment1" = "Neighborhood mean", #
"moment2" = "Neighborhood sd", #
"skew" = "Neighborhood skew", #
"kurtosis" = "Neighborhood kurtosis", #
"value" = "Image intensity (HU)",#
"thresh" = paste0("Threshold (>= ", lthresh, " and <= ", uthresh, ")"), #
"zscore1" = "Within-plane Coronal", #
"zscore2" = "Within-plane Sagittal", #
"zscore3" = "Within-plane Axial", #
"win_z" = "Winsorized z-score (20\\% trim)", #
"pct_thresh" = "Percentage thresholded neighbors", #
"prob_img" = "Atropos probability image", #
"pct_zero_neighbor" = "Percent of zero neighbors", #
"any_zero_neighbor" = "Indicator of any zero neighbors", #
"dist_centroid" = "Distance to Image centroid", #
"smooth5" = "Gaussian smooth (5mm^3)", #
"smooth10" = "Gaussian smooth (10mm^3)", #
"smooth20" = "Gaussian smooth (20mm^3)", #
"zscore_template" = "Standardized-to-template Intensity", #
"flipped_value" = "Contralateral difference"#
)#
)
lthresh = 40; uthresh = 80
load("logistic_modlist.rda")#
npred = length(coef(logistic_modlist$mod)) - 1#
# npred for intercept#
stopifnot(npred == 20)#
coefs = broom::tidy(logistic_modlist$mod, quick = TRUE)#
coefs$term = plyr::revalue(coefs$term, c("(Intercept)" = "Intercept", #
"moment1" = "Neighborhood mean", #
"moment2" = "Neighborhood sd", #
"skew" = "Neighborhood skew", #
"kurtosis" = "Neighborhood kurtosis", #
"value" = "Image intensity (HU)",#
"thresh" = paste0("Threshold (>= ", lthresh, " and <= ", uthresh, ")"), #
"zscore1" = "Within-plane Coronal", #
"zscore2" = "Within-plane Sagittal", #
"zscore3" = "Within-plane Axial", #
"win_z" = "Winsorized z-score (20\\% trim)", #
"pct_thresh" = "Percentage thresholded neighbors", #
"prob_img" = "Atropos probability image", #
"pct_zero_neighbor" = "Percent of zero neighbors", #
"any_zero_neighbor" = "Indicator of any zero neighbors", #
"dist_centroid" = "Distance to Image centroid", #
"smooth5" = "Gaussian smooth (5mm^3)", #
"smooth10" = "Gaussian smooth (10mm^3)", #
"smooth20" = "Gaussian smooth (20mm^3)", #
"zscore_template" = "Standardized-to-template Intensity", #
"flipped_value" = "Contralateral difference"#
)#
)
coefs
colnames(coef) = c("Predictor", "Beta")
colnames(coefs) = c("Predictor", "Beta")
coefs
load("/Users/johnmuschelli/Dropbox/Packages/ichseg/data/rf_modlist.rda")
rf_modlist
rf_modlist$mod
library(randomForest)
rf_modlist$mod
varImpPlot(rf_modlist$mod)
load("/Users/johnmuschelli/Dropbox/Packages/ichseg/data/logistic_modlist.rda")
logistic_modlist$mod
summary(logistic_modlist$mod)
load("/Users/johnmuschelli/Dropbox/Packages/ichseg/data/rf_modlist.rda")
system("open ./")
q('no')
load("/Users/johnmuschelli/Dropbox/Packages/ichseg/data/rf_modlist.rda")
library(randomForest)
varImpPlot(rf_modlist$mod)
load("/Users/johnmuschelli/Dropbox/CTR/DHanley/CT_Registration/Segmentation/Segmentation_Paper/logistic_modlist.rda")
logistic_modlist$mod
summary(logistic_modlist$mod)
load("/Users/johnmuschelli/Dropbox/CTR/DHanley/CT_Registration/Segmentation/Segmentation_Paper/Reseg_Aggregate_models_Rigid_logistic.Rda")
ls()
modlist$mod
summary(modlist$mod)
modlist$mod.time
modlist$mod.pauc
modlist$mod.acc
names(modlist)
